"use client";

import { useState, useEffect, use } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/components/ui/use-toast";
import {
  ChevronLeft,
  Loader2,
  Clock,
  Calendar,
  Copy,
  Download,
  Trash2,
  Sparkles,
  FileText,
  Edit,
  History,
} from "lucide-react";
import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import { ConfirmationModal } from '@/components/ConfirmationModal';

export default function ScriptPage({ params }) {
  const router = useRouter();
  const { toast } = useToast();
  const [script, setScript] = useState(null);
  const [loading, setLoading] = useState(true);
  const [copying, setCopying] = useState(false);
  const [deleteModal, setDeleteModal] = useState({ isOpen: false });

  // Unwrap params Promise
  const resolvedParams = use(params);
  const scriptId = resolvedParams.id;

  useEffect(() => {
    fetchScript();
  }, [scriptId]);

  const fetchScript = async () => {
    try {
      const response = await fetch(`/api/scripts/${scriptId}`);
      if (!response.ok) {
        throw new Error("Script not found");
      }
      const data = await response.json();
      setScript(data);
    } catch (error) {
      console.error("Error fetching script:", error);
      toast({
        title: "Error",
        description: "Failed to load script",
        variant: "destructive",
      });
      router.push("/scripts");
    } finally {
      setLoading(false);
    }
  };

  const handleCopy = async () => {
    setCopying(true);
    try {
      await navigator.clipboard.writeText(script.content);
      toast({
        title: "Copied!",
        description: "Script copied to clipboard",
      });
    } catch (error) {
      toast({
        title: "Failed to copy",
        description: "Please try again",
        variant: "destructive",
      });
    } finally {
      setCopying(false);
    }
  };

  const handleDownload = async () => {
    try {
      // Dynamically import jsPDF to avoid SSR issues
      const { default: jsPDF } = await import("jspdf");

      // Create new PDF document
      const doc = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });

      // Set document properties
      doc.setProperties({
        title: script.title,
        author: "GenScript AI",
        subject: "YouTube Script",
        keywords: script.tags?.join(", ") || "youtube, script",
        creator: "GenScript AI",
      });

      // Add header with gradient effect (simulated with rectangles)
      doc.setFillColor(147, 51, 234); // Purple
      doc.rect(0, 0, 210, 40, "F");

      // Add title
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(22);
      doc.setFont("helvetica", "bold");
      const titleLines = doc.splitTextToSize(script.title, 170);
      doc.text(titleLines, 20, 20);

      // Add metadata
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(
        `Created: ${new Date(script.created_at).toLocaleDateString()}`,
        20,
        32
      );
      if (script.channel?.name) {
        doc.text(`Channel: ${script.channel.name}`, 120, 32);
      }

      // Reset text color for content
      doc.setTextColor(0, 0, 0);

      // Add content with proper formatting
      doc.setFontSize(11);
      doc.setFont("helvetica", "normal");

      // Split content into lines and handle page breaks
      const lines = doc.splitTextToSize(script.content, 170);
      let y = 55;
      const pageHeight = doc.internal.pageSize.height;
      const lineHeight = 6;

      lines.forEach((line) => {
        if (y + lineHeight > pageHeight - 20) {
          // Add new page if needed
          doc.addPage();
          y = 20;

          // Add page header
          doc.setFillColor(147, 51, 234, 0.1);
          doc.rect(0, 0, 210, 10, "F");
          doc.setTextColor(147, 51, 234);
          doc.setFontSize(9);
          doc.text(script.title, 20, 7);
          doc.setTextColor(0, 0, 0);
          doc.setFontSize(11);
          y = 20;
        }

        // Check for section headers and format them
        if (line.startsWith("[") && line.includes("]")) {
          doc.setFont("helvetica", "bold");
          doc.setTextColor(147, 51, 234);
          doc.text(line, 20, y);
          doc.setFont("helvetica", "normal");
          doc.setTextColor(0, 0, 0);
        } else {
          doc.text(line, 20, y);
        }

        y += lineHeight;
      });

      // Add footer on last page
      const totalPages = doc.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i);
        doc.setTextColor(128, 128, 128);
        doc.setFontSize(9);
        doc.text(`Page ${i} of ${totalPages}`, 105, pageHeight - 10, {
          align: "center",
        });
        doc.text("Generated by GenScript AI", 20, pageHeight - 10);
      }

      // Save the PDF
      doc.save(`${script.title.replace(/[^a-z0-9]/gi, "_").toLowerCase()}.pdf`);

      toast({
        title: "Downloaded!",
        description: "Script saved as PDF to your downloads",
      });
    } catch (error) {
      console.error("Error generating PDF:", error);
      toast({
        title: "Download failed",
        description: "Could not generate PDF. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleDeleteClick = () => {
    setDeleteModal({ isOpen: true });
  };

  const handleDelete = async () => {
    try {
      const response = await fetch(`/api/scripts/${scriptId}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        throw new Error("Failed to delete script");
      }

      toast({
        title: "Script Deleted",
        description: "The script has been deleted successfully",
      });

      router.push("/scripts");
    } catch (error) {
      toast({
        title: "Delete Failed",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setDeleteModal({ isOpen: false });
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="glass-card p-8 animate-pulse-slow">
          <Loader2 className="h-12 w-12 animate-spin text-purple-400 mx-auto" />
          <p className="mt-4 text-gray-300">Loading script...</p>
        </div>
      </div>
    );
  }

  if (!script) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="glass-card p-8 text-center">
          <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-white mb-2">
            Script Not Found
          </h2>
          <p className="text-gray-400 mb-4">
            This script doesn't exist or you don't have access to it.
          </p>
          <Link href="/scripts">
            <Button className="glass-button">
              <ChevronLeft className="h-4 w-4 mr-2" />
              Back to Scripts
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6">
      {/* Background Effects */}
      <div className="fixed inset-0 -z-10 overflow-hidden">
        <div className="gradient-orb w-96 h-96 bg-purple-600 -top-48 -right-48 opacity-20" />
        <div className="gradient-orb w-96 h-96 bg-pink-600 -bottom-48 -left-48 opacity-20" />
      </div>

      <div className="max-w-5xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <Link href="/scripts">
            <Button variant="ghost" className="glass-button">
              <ChevronLeft className="h-4 w-4 mr-2" />
              Back to Scripts
            </Button>
          </Link>

          <div className="flex items-center gap-2">
            <Link href={`/scripts/${scriptId}/edit`}>
              <Button className="glass-button bg-gradient-to-r from-purple-500/50 to-pink-500/50">
                <Edit className="h-4 w-4 mr-2" />
                Edit Script
              </Button>
            </Link>
            <Link href={`/scripts/${scriptId}/history`}>
              <Button className="glass-button">
                <History className="h-4 w-4 mr-2" />
                View History
              </Button>
            </Link>
            <Button
              onClick={handleCopy}
              className="glass-button"
              disabled={copying}
            >
              {copying ? (
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Copy className="h-4 w-4 mr-2" />
              )}
              Copy
            </Button>
            <Button onClick={handleDownload} className="glass-button">
              <Download className="h-4 w-4 mr-2" />
              Download
            </Button>
            <Button
              onClick={handleDeleteClick}
              className="glass-button hover:bg-red-500/20"
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Delete
            </Button>
          </div>
        </div>

        {/* Script Info Card */}
        <div className="glass-card p-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-white flex items-center gap-3">
                {script.title}
                <Sparkles className="h-6 w-6 text-yellow-400 animate-pulse" />
              </h1>
              <div className="flex items-center gap-4 mt-3 text-sm text-gray-400">
                <Badge className="glass border-purple-400/50 text-purple-300">
                  {script.metadata?.type || "Script"}
                </Badge>
                <span className="flex items-center gap-1">
                  <Clock className="h-3 w-3" />
                  {script.metadata?.length || 5} min
                </span>
                <span className="flex items-center gap-1">
                  <Calendar className="h-3 w-3" />
                  {formatDistanceToNow(new Date(script.created_at), {
                    addSuffix: true,
                  })}
                </span>
              </div>
            </div>
          </div>

          {/* Tags */}
          {script.tags && script.tags.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-4">
              {script.tags.map((tag, index) => (
                <Badge
                  key={index}
                  className="glass border-blue-400/50 text-blue-300"
                >
                  #{tag}
                </Badge>
              ))}
            </div>
          )}

          {/* Hook */}
          {script.hook && (
            <div className="mb-4 p-4 glass-card bg-purple-500/10 border-l-4 border-purple-500">
              <p className="text-sm font-semibold text-purple-300 mb-1">Hook</p>
              <p className="text-white">{script.hook}</p>
            </div>
          )}

          {/* Description */}
          {script.description && (
            <div className="mb-4">
              <p className="text-sm font-semibold text-gray-400 mb-1">
                Description
              </p>
              <p className="text-gray-300">{script.description}</p>
            </div>
          )}
        </div>

        {/* Script Content */}
        <div className="glass-card p-6">
          <h2 className="text-xl font-semibold text-white mb-4 flex items-center gap-2">
            <FileText className="h-5 w-5 text-purple-400" />
            Script Content
          </h2>
          <div className="prose prose-invert max-w-none">
            <pre className="whitespace-pre-wrap text-gray-300 font-mono text-sm leading-relaxed">
              {script.content}
            </pre>
          </div>
        </div>

        {/* Metadata */}
        {script.metadata && (
          <div className="glass-card p-6">
            <h3 className="text-lg font-semibold text-white mb-3">
              Generation Details
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              {script.metadata.tone && (
                <div>
                  <p className="text-gray-400">Tone</p>
                  <p className="text-white capitalize">
                    {script.metadata.tone}
                  </p>
                </div>
              )}
              {script.metadata.targetAudience && (
                <div>
                  <p className="text-gray-400">Target Audience</p>
                  <p className="text-white capitalize">
                    {script.metadata.targetAudience}
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
      
      <ConfirmationModal
        isOpen={deleteModal.isOpen}
        onClose={() => setDeleteModal({ isOpen: false })}
        onConfirm={handleDelete}
        title="Delete Script"
        message={`Are you sure you want to delete "${script?.title}"? This action cannot be undone.`}
        confirmText="Delete"
        cancelText="Cancel"
      />
    </div>
  );
}
