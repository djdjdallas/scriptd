// DOCX Export Utility

import { Document, Paragraph, TextRun, HeadingLevel, AlignmentType, PageBreak } from 'docx';

export class DOCXExporter {
  constructor() {
    this.sections = [];
  }

  generateDOCX(script) {
    // Parse content
    const contentSections = this.parseContent(script.content);
    
    // Create document
    const doc = new Document({
      creator: 'GenScript',
      title: script.title,
      description: `${script.type} Script`,
      sections: [{
        properties: {
          page: {
            margin: {
              top: 1440, // 1 inch = 1440 twentieths of a point
              right: 1440,
              bottom: 1440,
              left: 1440
            }
          }
        },
        children: [
          ...this.createHeader(script),
          ...this.createMetadata(script),
          ...this.createContent(contentSections),
          ...this.createFooter()
        ]
      }]
    });

    return doc;
  }

  createHeader(script) {
    return [
      new Paragraph({
        text: script.title,
        heading: HeadingLevel.TITLE,
        alignment: AlignmentType.CENTER,
        spacing: {
          after: 200
        }
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `${script.type} Script - ${script.length} words`,
            size: 24, // 12pt
            color: '666666'
          })
        ],
        alignment: AlignmentType.CENTER,
        spacing: {
          after: 400
        }
      })
    ];
  }

  createMetadata(script) {
    const metadata = script.metadata || {};
    const metadataItems = [];
    
    if (metadata.tone) {
      metadataItems.push(`Tone: ${metadata.tone}`);
    }
    if (metadata.targetAudience) {
      metadataItems.push(`Audience: ${metadata.targetAudience}`);
    }
    if (script.createdAt) {
      const date = new Date(script.createdAt);
      metadataItems.push(`Created: ${date.toLocaleDateString()}`);
    }

    if (metadataItems.length === 0) {
      return [];
    }

    return [
      new Paragraph({
        children: [
          new TextRun({
            text: metadataItems.join(' • '),
            size: 20, // 10pt
            italics: true,
            color: '888888'
          })
        ],
        alignment: AlignmentType.CENTER,
        spacing: {
          after: 400
        }
      })
    ];
  }

  createContent(sections) {
    const paragraphs = [];

    sections.forEach((section, index) => {
      if (section.type === 'heading') {
        paragraphs.push(
          new Paragraph({
            text: section.text,
            heading: HeadingLevel.HEADING_2,
            spacing: {
              before: index > 0 ? 240 : 0,
              after: 120
            }
          })
        );
      } else {
        // Split long paragraphs for better readability
        const sentences = this.splitIntoSentences(section.text);
        const chunks = this.chunkSentences(sentences, 3); // Group 3 sentences per paragraph
        
        chunks.forEach((chunk, chunkIndex) => {
          paragraphs.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: chunk.join(' '),
                  size: 24 // 12pt
                })
              ],
              alignment: AlignmentType.JUSTIFY,
              spacing: {
                after: 200,
                line: 360 // 1.5 line spacing
              }
            })
          );
        });
      }
    });

    return paragraphs;
  }

  createFooter() {
    return [
      new Paragraph({
        children: [
          new TextRun({
            text: '\n\n',
            size: 24
          })
        ]
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: 'Generated by GenScript • genscript.io',
            size: 18, // 9pt
            color: '999999'
          })
        ],
        alignment: AlignmentType.CENTER
      })
    ];
  }

  parseContent(content) {
    const lines = content.split('\n');
    const sections = [];
    let currentParagraph = [];

    lines.forEach(line => {
      const trimmed = line.trim();
      
      if (!trimmed) {
        // Empty line - end current paragraph
        if (currentParagraph.length > 0) {
          sections.push({
            type: 'body',
            text: currentParagraph.join(' ')
          });
          currentParagraph = [];
        }
      } else if (this.isHeading(trimmed)) {
        // Heading - end current paragraph and add heading
        if (currentParagraph.length > 0) {
          sections.push({
            type: 'body',
            text: currentParagraph.join(' ')
          });
          currentParagraph = [];
        }
        sections.push({
          type: 'heading',
          text: this.cleanHeading(trimmed)
        });
      } else {
        // Regular text - add to paragraph
        currentParagraph.push(trimmed);
      }
    });

    // Add final paragraph
    if (currentParagraph.length > 0) {
      sections.push({
        type: 'body',
        text: currentParagraph.join(' ')
      });
    }

    return sections;
  }

  isHeading(text) {
    // Check for markdown-style headings or ALL CAPS sections
    return text.startsWith('#') || 
           (text === text.toUpperCase() && text.length < 50) ||
           (text.endsWith(':') && text.length < 50);
  }

  cleanHeading(text) {
    // Remove markdown syntax
    return text.replace(/^#+\s*/, '').replace(/:$/, '');
  }

  splitIntoSentences(text) {
    // Basic sentence splitting
    return text.match(/[^.!?]+[.!?]+/g) || [text];
  }

  chunkSentences(sentences, size) {
    const chunks = [];
    for (let i = 0; i < sentences.length; i += size) {
      chunks.push(sentences.slice(i, i + size));
    }
    return chunks;
  }
}

// Export function
export async function exportToDOCX(script) {
  const exporter = new DOCXExporter();
  const doc = exporter.generateDOCX(script);
  
  return {
    document: doc,
    filename: `${script.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_script.docx`,
    contentType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
  };
}